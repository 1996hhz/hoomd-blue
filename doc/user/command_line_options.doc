/*
Highly Optimized Object-oriented Many-particle Dynamics -- Blue Edition
(HOOMD-blue) Open Source Software License Copyright 2008-2011 Ames Laboratory
Iowa State University and The Regents of the University of Michigan All rights
reserved.

HOOMD-blue may contain modifications ("Contributions") provided, and to which
copyright is held, by various Contributors who have granted The Regents of the
University of Michigan the right to modify and/or distribute such Contributions.

You may redistribute, use, and create derivate works of HOOMD-blue, in source
and binary forms, provided you abide by the following conditions:

* Redistributions of source code must retain the above copyright notice, this
list of conditions, and the following disclaimer both in the code and
prominently in any materials provided with the distribution.

* Redistributions in binary form must reproduce the above copyright notice, this
list of conditions, and the following disclaimer in the documentation and/or
other materials provided with the distribution.

* All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html

* Any electronic documents citing HOOMD-Blue will link to the HOOMD-Blue website:
http://codeblue.umich.edu/hoomd-blue/

* Apart from the above required attributions, neither the name of the copyright
holder nor the names of HOOMD-blue's contributors may be used to endorse or
promote products derived from this software without specific prior written
permission.

Disclaimer

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND/OR ANY
WARRANTIES THAT THIS SOFTWARE IS FREE OF INFRINGEMENT ARE DISCLAIMED.

IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*! \page page_command_line_options Command line options

<h2>Overview</h2>
\b hoomd [script_file] [options]

<h3>Options</h3>
<i>no options given</i>
\par
hoomd will run on an automatically determined GPU, or on the CPUs if no capable GPUs are found.

<b>-h, --help</b>
\par
print a description of all the command line options

<b>--mode</b>={\a cpu | \a gpu}<br>
\par
force hoomd to run either on the \a cpu or \a gpu

<b>--gpu</b>={#}
\par
specify explicitly the GPU on which hoomd will execute. Implies --mode=gpu.

<b>--ncpu</b>={#}
\par
specify the number of CPU cores on which hoomd will execute. <i>Does not</i> imply --mode=cpu.

<b>--ignore-display-gpu</b>
\par
prevent hoomd from running on the GPU that is attached to the display

<b>--minimize-cpu-usage</b>
\par
minimize the CPU usage of hoomd when it runs on a GPU

<b>--gpu_error_checking</b>
\par
enable error checks after every GPU kernel call

<b>--user</b>
\par
user options
<hr>

<h2>Detailed description</h2>

<h3>Control where a simulation is executed</h3>
Any simulation in HOOMD-blue can be run on a number of CPUs or a GPU.  To control which, 
set the \c --mode option on the script command line. Valid settings are \c cpu
and \c gpu.
\code
hoomd some_script.hoomd --mode=cpu
\endcode
When \c --mode is set to \c gpu and no other options are specified, hoomd will
choose a GPU automatically. It will prioritize the GPU choice based on speed and
whether it is attached to a display. Unless you take steps to configure your system
(see below), then running a second instance of HOOMD-blue will place it on the same GPU 
as the first. HOOMD-blue will run correctly with more than one simulation on a GPU as 
long as there is enough memory, but the performance penalty is severe.

You can select the GPU on which to run using the \c --gpu command line option.
\code
hoomd some_script.hoomd --gpu=1
\endcode
Note that specifying \c --gpu implies \c --mode=gpu. To find out which id
is assigned to each GPU in your system, download the CUDA SDK for your system
from http://www.nvidia.com/object/cuda_get.html and run the \c deviceQuery sample.

If you run a script without any options
\code
hoomd some_script.hoomd
\endcode
hoomd first checks if there are any GPUs in the system. If it finds one or more,
it makes the same automatic choice described previously. If none are found, it runs on the CPU.

<hr>
<h3>Automatic determination of the GPU on which to run</h3>
If CUDA 2.2 or newer is installed on a Linux OS, free GPUs can be determined automatically. To utilize this
capability, the system administrator (root) must first use the \c nvidia-smi utility to enable 
the compute-exclusive mode on all GPUs in the system (for an example, see http://forums.nvidia.com/index.php?showtopic=96638&hl=nvidia-smi).
With this mode enabled, running hoomd with no options or with the \c --mode=gpu option will result in an automatic
choice of the first free GPU from the prioritized list.

Furthermore, the compute-exclusive mode <em>only allows a</em> \b single CUDA application to run on each GPU. If you have
4 compute-exclusive GPUs available in the system, executing a fifth instance of hoomd with "hoomd some_script.hoomd"
will result in the error: ***Error! no CUDA-capable device is available.
<hr>

<h3>Minimizing the CPU usage of HOOMD-blue</h3>
When hoomd is running on a GPU, it still uses 100% of one CPU core by default. This CPU usage can be
decreased significantly by specifying the \c --minimize-cpu-usage command line option:
\code
hoomd some_script.hoomd --minimize-cpu-usage
\endcode
Tests performed indicate that enabling this option incurs a 10% overall performance reduction, 
but the CPU usage of hoomd is reduced to only 10% of a single CPU core.

\note For the --minimize-cpu-usage option to work, hoomd must be compiled and used on a system with CUDA 
version 2.2 or newer.

<hr>

<h3>Preventing HOOMD-blue from running on the display GPU</h3>

While running hoomd on the display GPU works just fine, it does moderately slow the simulation and causes the display 
to lag. If you wish to prevent hoomd from running on the display, add the \c --ignore-display-gpu command line:
\code
hoomd some_script.hoomd --ignore-display-gpu
\endcode

<hr>

<h3>Controlling error checking on the GPU</h3>
Detailed error checking is off by default to enable the best performance. If you have trouble
that appears to be caused by the failure of a calculation to run on the GPU, you 
can run with GPU error checking enabled to check for any errors returned by the GPU.

To do this, run the script with the \c --gpu_error_checking command line option:
\code
hoomd some_script.hoomd --gpu_error_checking
\endcode

<hr>

<h3>Controlling the number of CPU cores on which HOOMD-blue executes</h3>
HOOMD-blue runs in parallel on any number of local CPU cores using OpenMP. The number of CPU cores
used is determined by the OpenMP runtime, which usually defaults to all CPU cores in the system. Limit the number of 
CPU cores used by setting the environment variable OMP_NUM_THREADS before executing hoomd or by using the --ncpu
command line option.

<hr>

<h3>User options</h3>

User defined options may be passed to a job script via --user and retrieved by calling option.get_user(). For example,
if hoomd is executed as
\code
hoomd some_script.py --gpu=2 --ignore-display-gpu --user="--N=5 --rho=0.5"
\endcode
then option.get_user() will return ['--N=5', '--rho=0.5'], which is a format suitable for processing by standard
tools such as optparse.

<hr>

You can always run
\code
hoomd some_script.hoomd --help
\endcode
to get a full list of the available command line options some of which
may not be listed here.
*/
