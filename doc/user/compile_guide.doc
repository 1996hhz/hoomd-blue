
/*
Highly Optimized Object-Oriented Molecular Dynamics (HOOMD) Open
Source Software License
Copyright (c) 2008 Ames Laboratory Iowa State University
All rights reserved.

Redistribution and use of HOOMD, in source and binary forms, with or
without modification, are permitted, provided that the following
conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names HOOMD's
contributors may be used to endorse or promote products derived from this
software without specific prior written permission.

Disclaimer

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND
CONTRIBUTORS ``AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 

IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS  BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
*/


/*! 
\page page_compile_guide Compiling HOOMD-blue

Table of contents:
 - \ref sec_software_req
 - \ref sec_build_instructions
 - \ref sec_build_options
 - \ref sec_build_plugin
<hr>

\section sec_software_req Software Prerequisites

HOOMD-blue requires a number of prerequisite software packages and libraries. Detailed instructions on installing these
on the various platforms that hoomd supports are included below: \ref sec_build_instructions.

- Required to compile:
  - Python >= 2.3
  - boost >= 1.32.0
  - CMake
    - Version 2.6.2 or newer on Linux and Mac
    - Version 2.8.0 or newer on Windows
  - C++ Compiler (must be compatible with CUDA)
  - CUDA Toolkit
    - Version 2.0 or newer on Linux and Windows
    - Version 3.0 or newer on Mac
- Useful developer tools
  - Subversion >= 1.5.4
  - Doxygen  >= 1.5.6

<hr>
\section sec_build_instructions Build instructions for Linux and Mac.

Detailed instructions are organized into separate pages below.
 - \subpage page_compile_guide_mac
 - \subpage page_compile_guide_linux_generic

<hr>
\section sec_build_options Build options
Here is a list of all the build options that can be changed by CMake. To changes these settings, cd to your <i>build</i>
directory and run
\code
 $ ccmake .
\endcode
or run cmake-gui and point it to your build directory. After changing an option, press c to configure then press g to
generate. The makefile/IDE project is now updated with the newly selected options.
 - \b BUILD_TESTING - Enables the compilation of unit tests
 - \b CMAKE_BUILD_TYPE - sets the build type (Makefile generation only, XCode and 
 		Visual Studio can change the build type from within their GUIs)
	- \b Debug - Compiles debug information into the library and executables. 
		Enables asserts to check for programming mistakes. HOOMD-blue will run 
		\e very slow if compiled in Debug mode, but problems are easier to
		identify.
	- \b Release - All compiler optimizations are enabled and asserts are removed.
		Recommended for production builds: required for any benchmarking.
 - \b ENABLE_CUDA - Enable compiling of the GPU accelerated computations using CUDA
 	- Requires the CUDA Toolkit to be installed
 - \b ENABLE_DOXYGEN - enables the generation of detailed user and developer documentation
 	- Requires doxygen to be installed
	- Defaults to off if doxygen is older than 1.5.6. You can manually turn it on, but expect doxygen errors
		and possible missing output from the generated documentation.
 - \b ENABLE_OCELOT - compiles hoomd against ocelot instead of the CUDA runtime
 - \b ENABLE_OPENMP - enables the generation of a multi-core capable hoomd using OpenMP. Can only be enabled if your
        compiler supports OpenMP.
 - \b ENABLE_VALGRIND - (Linux only) Runs every unit test through valgrind for hardcore testing/debugging. If used with CUDA, device emulation mode is recommended.
 - \b ENABLE_ZLIB - Links hoomd to libz (must be available) and enables direct writing of zlib compressed files from dump.bin
 - \b SINGLE_PRECISION - Controls precision
 	- When set to \b ON, all calculations are performed in single precision.
 	- When set to \b OFF, all calculations are performed in double precision. 
 	- Must be set to \b ON to enable the \b ENABLE_CUDA option (HOOMD-blue has not yet been updated to perform double precision calculations)

There are a few options for controlling the CUDA compilation.
 - \b CUDA_ARCH	- Sets the GPU architecture to compile for. Parts of HOOMD-blue will run significantly faster 
 		when run on compute 1.1 or newer GPUs, but only if hoomd is compiled for that that target. The
		CUDA programming guide has a nice list of which GPUs are which compute version in Appendix A.
		- \b 10 - compile for compute 1.0 and newer devices. Executable will run on all CUDA GPUs, but no fast
			code paths are activated.
		- \b 11 - compile for compute 1.1 and newer devices. Some faster code paths are activated.
		- \b 12 - compile for compute 1.2 and newer devices. 
		- \b 13 - compile for compute 1.3 and newer devices. Allows double precision calculations.
 - \b CUDA_BUILD_CUBIN - Enables a display of register usage for each kernel compiled.
 - \b CUDA_BUILD_EMULATION - Set to ON to have CUDA emulate the GPU in software. This is extremely slow.
 - \b NVCC_FLAGS - Allows additional flags to be passed to nvcc.

The following are advanced variables, and thus will only show when CMake's advanced mode is turned on.
You really shouldn't change these from their defaults unless you really know what you are doing.
 - \b ENABLE_STATIC - Controls the compiling and linking of static libraries
 	- When set to \b ON, \b libhoomd is compiled as a static library and all 
 		other libraries (i.e. boost) are linked statically if possible.
 	- When set to \b OFF, \b libhoomd is compiled as a dynamic library and all
 		other libraries are linked dynamically if possible.
 	- Note: \b ENABLE_STATIC=OFF is not supported on windows. 
 	- Note 2: \b ENABLE_STATIC defaults OFF and can only be set ON from the command line 
 		and when configuring a clean build directory.
		Example:
 		\code ccmake -D ENABLE_STATIC=ON ../hoomd
 		\endcode

\section sec_build_plugin Building a plugin for HOOMD-blue

There are several methods that can be used to build code that interfaces with hoomd. 

<b>Method 1: Build an executable that uses hoomd as a library</b><br>

First, understand that building an executable linked to hoomd for the purposes of running a simulation is not a 
supported configuration. The developers will not respond to or fix bugs found while using such a setup. There are many
levels of configuration and performance tuning that are handled at the python script level, and the C++ API is mainly
designed to interface with python.

However, there are many cases when building a simple quick test executable is desirable (i.e. to test or debug a new 
feature that does not yet have a python interface). So a simple method to build such executables is provided.

To setup for use:
 -# Compile hoomd normally
 -# <i>'make install'</i> hoomd to a desired location (i.e. your home directory)
 -# Add \c hoomd_install_location/bin to your \c PATH as usual
 -# Add \c `hoomd-config.sh --ldpath to your DYLD / LD library paths (if you compiled with ENABLE_STATIC=off)

Here is a short example program that does nothing except calculate lj pair forces once.

\code
// include hoomd.h to get all of the built in hoomd classes
#include "hoomd/hoomd.h"
using namespace boost;

int main()
    {
    const unsigned int N = 5000;

    ExecutionConfiguration exec_conf(ExecutionConfiguration::GPU);

    // create a random particle system to sum forces on
    RandomInitializer rand_init(N, Scalar(0.2), Scalar(0.9), "A");
    shared_ptr<SystemDefinition> sysdef(new SystemDefinition(rand_init, exec_conf));
    shared_ptr<ParticleData> pdata = sysdef->getParticleData();

    shared_ptr<BinnedNeighborList> nlist(new BinnedNeighborList(sysdef, Scalar(3.0), Scalar(0.8)));

    shared_ptr<PotentialPairLJ> fc1(new PotentialPairLJ(sysdef, nlist));
    fc1->setRcut(0, 0, Scalar(3.0));

    // setup some values for alpha and sigma
    Scalar epsilon = Scalar(1.0);
    Scalar sigma = Scalar(1.2);
    Scalar alpha = Scalar(0.45);
    Scalar lj1 = Scalar(4.0) * epsilon * pow(sigma,Scalar(12.0));
    Scalar lj2 = alpha * Scalar(4.0) * epsilon * pow(sigma,Scalar(6.0));

    // specify the force parameters
    fc1->setParams(0,0,make_scalar2(lj1,lj2));

    // compute the forces
    fc1->compute(0);
    }
\endcode

To compile this sample (or any code written similarly), just run
\code
$ g++ -o test test.cc `hoomd-config.sh --cflags --libs`
\endcode
(obviously, this works on linux and mac only)

<b>Method 2: Write a full-fledged plugin in python only</b><br>

Some plugins can be implemented fully in python, providing high-level code for configuring or running simulations. 

In order to use such a plugin, one must first:
 -# Compile hoomd normally
 -# <i>'make install'</i> hoomd to a desired location (i.e. your home directory)
 -# Add \c hoomd_install_location/bin to your \c PATH as usual

Create a directory to contain the python module for the plugin:
\code
cd hoomd_install_location/lib/hoomd/python-module/hoomd_plugins
mkdir plugin_name
cd plugin_name
touch __init__.py
\endcode

\b Note: It is <i>highly</i> recommended that you develop your plugin in a directory outside hoomd_install_location
and using a revision control software. You wouldn't want to loose the code you've written when hoomd is uninstalled!
In this case, you can just copy the module to the hoomd-plugins directory to install it.
\code
cp -R plugin_name hoomd_install_location/lib/hoomd/python-module/hoomd_plugins
\endcode

Once the plugin is written and installed, it can be used in a hoomd script like so:
\code
from hoomd_script import *
from hoomd_plugins import plugin_name

init.whatever(...)
plugin_name.whatever(...)
\endcode

<b>Method 3: Write a full-fledged plugin with C++ code included</b><br>

For high performance, execution on the GPU, or other reasons, part of a plugin can be written in C++. To write a plugin 
that incorporates such code, 'make install' hoomd as normal. Then copy the
directory hoomd_install_location/share/hoomd/plugin_template_cpp to a new working space and modify it to implement your
plugin. See the README file in that directory for full documentation.

*/
