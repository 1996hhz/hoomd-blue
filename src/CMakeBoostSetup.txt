# Highly Optimized Object-Oriented Molecular Dynamics (HOOMD) Open
# Source Software License
# Copyright (c) 2008 Ames Laboratory Iowa State University
# All rights reserved.

# Redistribution and use of HOOMD, in source and binary forms, with or
# without modification, are permitted, provided that the following
# conditions are met:

# * Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names HOOMD's
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.

# Disclaimer

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND
# CONTRIBUTORS ``AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 

# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS  BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

# $Id$
# $URL$

#################################
## Boost is a required library

# setup the boost static linkage
if(USE_STATIC)
set(Boost_USE_STATIC_LIBS "ON")
else(USE_STATIC)
if(WIN32)
	message(FATAL_ERROR "Dynamically linking boost to HOOMD on windows is a hopeless cause. If 
		you really want this feature, make it work yourself")
endif(WIN32)
set(Boost_USE_STATIC_LIBS "OFF")
endif(USE_STATIC)

# first, see if we can get any supported version of Boost
find_package(Boost 1.32.0 COMPONENTS thread filesystem python signals program_options unit_test_framework REQUIRED)

# if we get boost 1.35 or greator, we need to get the system library too

if (Boost_MINOR_VERSION GREATER 34)
find_package(Boost 1.35.0 COMPONENTS thread filesystem python signals system unit_test_framework program_options REQUIRED)
endif (Boost_MINOR_VERSION GREATER 34)

if (WIN32)
# link directories are needed on windows
link_directories(${Boost_LIBRARY_DIRS})

# the user needs to see if the boost auto-linking is working on windows
# Disabled because it is getting annoying. Renable if you need to debug
# add_definitions(-DBOOST_LIB_DIAGNOSTIC)

# also enable stdcall boost::bind support on windows for CUDA runtime API calls
# but it isn't needed in 64 bit
if (NOT CMAKE_CL_64)
add_definitions(-DBOOST_BIND_ENABLE_STDCALL)
endif (NOT CMAKE_CL_64)

endif (WIN32)
