# Highly Optimized Object-Oriented Molecular Dynamics (HOOMD) Open
# Source Software License
# Copyright (c) 2008 Ames Laboratory Iowa State University
# All rights reserved.

# Redistribution and use of HOOMD, in source and binary forms, with or
# without modification, are permitted, provided that the following
# conditions are met:

# * Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names HOOMD's
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.

# Disclaimer

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND
# CONTRIBUTORS ``AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 

# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS  BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

# $Id$
# $URL$

##################################
## Find CUDA
## This funny construction only allows the user to enable CUDA 
## if single precicsion is enabled
remove_definitions (-DSINGLE_PRECISION)
remove_definitions (-DENABLE_CUDA)
if(SINGLE_PRECISION)
	add_definitions (-DSINGLE_PRECISION)

	option(ENABLE_CUDA "Enable the compilation of the CUDA GPU code" off)

	# add ENABLE_CUDA definition to compiler to enable #ifdef'd code
	if (ENABLE_CUDA)
		find_package(Cuda)
		add_definitions (-DENABLE_CUDA)
	endif (ENABLE_CUDA)
	
endif(SINGLE_PRECISION)
	
##############
## Option to disable the ULF bug workaround
option(DISABLE_ULF_WORKAROUND "Set to ON to enable higher performace at the cost of stability on pre C1060 GPUs" off)
mark_as_advanced(DISABLE_ULF_WORKAROUND)	
if (DISABLE_ULF_WORKAROUND)
	add_definitions (-DDISABLE_ULF_WORKAROUND)
endif (DISABLE_ULF_WORKAROUND)
	
	
##############
## Option to read GPU to run on from CAC_GPU_ID
## - defaults to ON when compiling on nyx
site_name(MACHINE_NAME)
if (MACHINE_NAME MATCHES "nyx")
	message(STATUS "Compiling on nyx")
	option(ENABLE_CAC_GPU_ID "Set to ON to have all HOOMD benchmarks, tests, and hoomd_script automatically parse CAC_GPU_ID to tell which GPUs to run on" on)
else (MACHINE_NAME MATCHES "nyx")
	option(ENABLE_CAC_GPU_ID "Set to ON to have all HOOMD benchmarks, tests, and hoomd_script automatically parse CAC_GPU_ID to tell which GPUs to run on" off)
endif (MACHINE_NAME MATCHES "nyx")
mark_as_advanced(MACHINE_NAME)
mark_as_advanced(ENABLE_CAC_GPU_ID)
	
if (ENABLE_CAC_GPU_ID)
	add_definitions (-DENABLE_CAC_GPU_ID)
endif (ENABLE_CAC_GPU_ID)
	
