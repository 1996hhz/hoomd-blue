# Highly Optimized Object-Oriented Molecular Dynamics (HOOMD) Open
# Source Software License
# Copyright (c) 2008 Ames Laboratory Iowa State University
# All rights reserved.

# Redistribution and use of HOOMD, in source and binary forms, with or
# without modification, are permitted, provided that the following
# conditions are met:

# * Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names HOOMD's
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.

# Disclaimer

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND
# CONTRIBUTORS ``AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 

# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS  BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

# $Id$
# $URL$

#################################
## Optional static build
## Enabling the static build will link as many libraries as possible statically
OPTION(USE_STATIC "Link as many libraries as possible statically" ON)
if (USE_STATIC)
	add_definitions(-DUSE_STATIC)
endif(USE_STATIC)

################################
## thread safe compiling
if(WIN32)
	add_definitions(-D_MT)
elseif(UNIX)
	add_definitions(-D_REENTRANT)
endif(WIN32)

#################################
## On windows: we need winsock
if (WIN32)
	if(CMAKE_CL_64)
	find_library(WINSOCK_LIB WSock32 PATHS 
		$ENV{PLATFORMSDK_DIR}Lib/AMD64 "$ENV{PROGRAMFILES}/Microsoft Platform SDK/Lib/AMD64" 
		"$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/VC/PlatformSDK/Lib/AMD64" 
		DOC "Path to WSock32.lib")
	else(CMAKE_CL_64)
	find_library(WINSOCK_LIB WSock32 PATHS
		$ENV{PLATFORMSDK_DIR}Lib "$ENV{PROGRAMFILES}/Microsoft Platform SDK/Lib" 
		"$ENV{PROGRAMFILES}/Microsoft Visual Studio 8/VC/PlatformSDK/Lib"
		"$ENV{PROGRAMFILES}/Microsoft Platform SDK for Windows Server 2003 R2/Lib"
		DOC "Path to WSock32.lib")
	endif(CMAKE_CL_64)
endif (WIN32)

##################################
## SSE and floating point compilation options
# msvc 2005 doesn't define __SSE__ or __SSE2__, so we define them for it
# this of course assumes that the machine is capable of SSE2.... which almost any windows machine will be these days

if (WIN32)
add_definitions(-D__SSE__ -D__SSE2__)
endif (WIN32)

# allow user to compile code with single instead of double precision
# single precision option
option(SINGLE_PRECISION "Use single precision math" ON)

##################################
## find the threads library
find_package(Threads)

#################################
## setup python library and executable
# find the python interpreter, first
find_package(PythonInterp REQUIRED)
# find the python libraries to link to
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_PATH})
