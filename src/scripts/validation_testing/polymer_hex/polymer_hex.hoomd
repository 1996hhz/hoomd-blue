# this is a validation test job script for HOOMD. It runs a bead-spring polymer simulation that should
# self-assemble into the hex phase if everything is working proerly.
from hoomd_script import *
import math

# parameters
phi_P = 0.25
n_poly = 1000
T = 1.2
polymer1 = dict(bond_len=1.2, type=['A']*6 + ['B']*7 + ['A']*6, bond="linear", count=n_poly)

# perform some simple math to find the length of the box
N = len(polymer1['type']) * polymer1['count'];
L = math.pow(math.pi * N / (6.0 * phi_P), 1.0/3.0);

# generate the polymer system
init.create_random_polymers(box=hoomd.BoxDim(L), polymers=[polymer1], separation=dict(A=0.35, B=0.35));

# force field setup
harmonic = bond.harmonic()
harmonic.set_coeff('polymer', k=330.0, r0=0.84)
lj = pair.lj(r_cut=3.0)
lj.pair_coeff.set('A', 'A', epsilon=1.0, sigma=1.0, alpha=0.0)
lj.pair_coeff.set('A', 'B', epsilon=1.0, sigma=1.0, alpha=0.0)
lj.pair_coeff.set('B', 'B', epsilon=1.0, sigma=1.0, alpha=1.0)

# dump every 100,000 steps
dump.mol2(filename="polymers.mol2");
dump.dcd(filename="dump.dcd", period=100000);

# log lj energy
analyze.log(filename="energy.log", quantities=['lj_energy'], period=2000)

# integrate NVT for a bunch of time steps
integrate.nvt(dt=0.005, T=T, tau=0.5)

run(20e6)
