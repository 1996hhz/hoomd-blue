#! /usr/bin/env hoomd
# $Id$
# $URL$

from hoomd import *
import math;

# setup parameters of simulation
r_cut = 3.0;
r_buff = 0.8;
dt = 0.005;
T = 1.2;
input_file = find_hoomd_data_dir() + "/benchmarks/polymer/p64017_hoomd.xml";

# initialize particles
init = HOOMDInitializer(input_file);
pdata = ParticleData(init);

# setup forces
nlist = BinnedNeighborListGPU(pdata, r_cut, r_buff);
init.setupNeighborListExclusions(nlist);
nlist.setEvery(5);

fc = LJForceComputeGPU(pdata, nlist, r_cut);
sigma = 1.0;
alpha = 0.0;
epsilon = 1.0;
lj1 = 48.0 * epsilon * math.pow(sigma, 12.0);
lj2 = alpha * 24.0 * epsilon * math.pow(sigma, 6.0);
fc.setParams(0, 0, lj1, lj2);
fc.setParams(0, 1, lj1, lj2);
alpha = 1.0;
lj2 = alpha * 24.0 * epsilon * math.pow(sigma, 6.0);
fc.setParams(1, 1, lj1, lj2);

fc.setBlockSize(448);

fc_bond = BondForceComputeGPU(pdata, 330, 0.84);
init.setupBonds(fc_bond);

# setup the particle sort
sorter = SFCPackUpdater(pdata, 1.0);

# integrator
nvt = NVTUpdaterGPU(pdata, dt, 18000.0, T);
nvt.addForceCompute(fc);
nvt.addForceCompute(fc_bond);

# setup system
sys = System(pdata, 0);
sys.addCompute(nlist, "nlist");
sys.addCompute(fc, "fc");
sys.addCompute(fc_bond, "fc_bond");
sys.setIntegrator(nvt);
sys.addUpdater(sorter, "sorter", 500);

# warm up
sys.run(2000);

# quick bmark
sys.enableProfiler(True);
sys.run(2000);
sys.enableProfiler(False);

sys.run(50000);

raw_input("Benchmark complete: press enter to exit");
