/*! \page page_command_line_options Command line options
	
<h2>Controlling where a simulation is executed</h2>
Any simulation in HOOMD can be run on the CPU or GPU.  To control which, 
set the \c --mode option on the script command line. Valid settings are \c cpu
and \c gpu.
\code
hoomd some_script.hoomd --mode=cpu
\endcode
When \c --mode is set to \c gpu and no other options are specified, HOOMD
runs on the first GPU (number 0) in the system. This may not be desirable
if another GPU in the system is faster or a simulation is already running 
on GPU 0 (HOOMD will run correctly with more than one simulation on a GPU as 
long as there is enough memory, but the performance penalty is severe).
You can select which GPU to run on using the \c --gpu command line option.
\code
hoomd some_script.hoomd --gpu=1
\endcode
Note that specifying \c --gpu implies \c --mode=gpu. To find out which id
is assigned to each GPU in your system, download the CUDA SDK for your system
from http://www.nvidia.com/object/cuda_get.html and run the \c deviceQuery sample.

Multiple GPUs can be selected to run on by specifying a comma separated list:
\code
hoomd some_script.hoomd --gpu=0,1
\endcode
Any number of GPUs can be specified in the list.

If you run a script without any options
\code
hoomd some_script.hoomd
\endcode
HOOMD first checks if there are any GPUs in the system. If it finds one or more,
it runs on the default GPU (usually GPU 0). If none are found, it runs on the CPU.

<hr>
<h2>Automatic determiniation of the GPU on which to run</h2>
If CUDA 2.2 or newer is installed on a Linux OS, free GPUs can be determined automatically. To utilize this
capability, the system administrator (root) must first use the \c nvidia-smi utility to enable 
the compute-exclusive mode on all GPUs in the system (for an example, see http://forums.nvidia.com/index.php?showtopic=96638&hl=nvidia-smi).
Then the following command line forms for HOOMD will automatically choose the first free GPU(s) on the system:

To run on the first free GPU:
\code
hoomd some_script.hoomd
\endcode
or:
\code
hoomd some_script.hoomd --mode=gpu
\endcode
The first example will revert to running on the CPU if no GPUs are installed in the system. The 2nd form forces
HOOMD to run on a GPU or quit with an error.

To run on the first \a N free GPUs:
\code
hoomd some_script.hoomd --ngpu=N
\endcode
, where N is an integer

Furthermore, the compute-exclusive mode <em>only allows a</em> \b single CUDA application to run on that GPU. If you have
4 compute-exclusive GPUs available in the system, executing a fifth instace of HOOMD with "hoomd some_script.hoomd"
will result in the error: ***Error! no CUDA-capable device is available ... 
<hr>

<h2>Controlling error checking on the GPU</h2>
Detailed error checking is off by default to enable the best performance. If you have trouble
that appears to be caused by the failure of a calculation to run on the GPU, you 
can run with GPU error checking enabled to check for any errors returned by the GPU.

To do this, run the script with the \c --gpu_error_checking command line option:
\code
hoomd some_script.hoomd --gpu_error_checking
\endcode

<hr>

You can always run
\code
hoomd some_script.hoomd --help
\endcode
to get a full list of the available command line options some of which
may not be listed here.
*/