/*
Highly Optimized Object-Oriented Molecular Dynamics (HOOMD) Open
Source Software License
Copyright (c) 2008 Ames Laboratory Iowa State University
All rights reserved.

Redistribution and use of HOOMD, in source and binary forms, with or
without modification, are permitted, provided that the following
conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names HOOMD's
contributors may be used to endorse or promote products derived from this
software without specific prior written permission.

Disclaimer

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND
CONTRIBUTORS ``AS IS''  AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 

IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS  BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
*/

/*! \page page_software_req_install_linux Installing Software Prerequisites on Linux

This page assumes that you have a standard terminal window open. Commands to run will
be indicated as below:
\code
 $ echo hello
hello
\endcode
" $ " indicates a shell prompt. As demonstrated above, if you type "echo hello", then you should see the same
output obtained above on the next line: "hello"

The process for installing software/libraries differs from linux distribution to distribution. 
In Gentoo (http://www.gentoo.org/) 
\code
 $ emerge python
\endcode
would install python. Look at your linux distribution's documentation to find how to install
packages on your system (i.e. yum, apt-get, up2date, or another). You may need to "su -" or use sudo to
become root before installing.

\section software_req_install_linux_python Python

First, check if python is already installed
\code
 $ python -V
Python 2.4.4
\endcode
Make sure that the version is 2.3 or greater. If you get
\code
bash: python: command not found
\endcode
or have a version older than 2.3, you will need to upgrade/install python. 
Note that you will also 
need the python development libraries which some distributions might separate into into
python-devel or some such. The existence of the python development package can be tested
by checking the output of 
\code 
 $ ls /usr/include/python2.X/Python.h
/usr/include/python2.X/Python.h
\endcode
where X is replaced with the major version of python that you have (i.e. For python 2.4.4 above,
X would be 4). If this returned 
\code
ls: cannot access /usr/include/python2.X/Python.h: No such file or directory
\endcode
then you do not have the python development libraries installed.



\section software_req_install_linux_boost Boost

First, check if boost is already installed
\code
 $ grep BOOST_LIB_VERSION /usr/include/boost/version.hpp
//  BOOST_LIB_VERSION must be defined to be the same as BOOST_VERSION
#define BOOST_LIB_VERSION "1_34_1"
\endcode
Make sure that the version is 1_32_0 or newer. If you get
\code
grep: /usr/include/boost/version.hpp: No such file or directory
\endcode
then boost is not installed. You can upgrade/install boost with your distribution's package
manager. You may need to install the boost-static package to get the static libraries needed by
HOOMD.

If your distribution doesn't have a new enough version of boost, you can build it by hand. Go
to http://www.boost.org , download the latest source code and unpack it. cd to the source directory and run
\code
 $ mkdir /home/user/software
 $ ./configure --with-python-version=2.5 --prefix=/home/user/software/
\endcode

By default, only shared libraries are built. HOOMD expects static libraries by default,
so open up Makefile in your favorite text editor and  make the following change 
(for building boost 1.35 or newer):
\code
BJAM_CONFIG=variant=release threading=multi link=shared,static
\endcode

Then you can build and install boost with the following commands.
\code
 $ make
 $ make install
\endcode
Be prepared to wait a while: boost takes a long time to compile.

Before running ccmake or cmake-gui, set the following environment variables to the location where you installed boost:
\code
 $ export BOOST_ROOT=/home/joaander/software
 $ ccmake ../src  # or run cmake-gui
 ... continue with build instructions ...
\endcode

\section software_req_install_linux_compiler Compiler

These instructions test for the installation of gcc. Other C++ compilers can be used
if you wish, though compilations with CUDA enabled are only supported with gcc.

Test if g++ is installed.
\code 
 $ g++ --version
 $ g++ (GCC) 4.1.2 (Gentoo 4.1.2)
\endcode
Any version should do. If you get
\code
bash: g++: command not found
\endcode
then you will need to install gcc using your distributions package management system.


\section software_req_install_linux_cmake CMake

It is not very likely that your linux distribution includes CMake by default, 
but check anyways.
\code
 $ cmake --version
cmake version 2.6-patch 1
\endcode
Make sure the version is 2.6 or later. If you have an old version or get
\code
bash: cmake: command not found
\endcode
then you will need to upgrade/install CMake. Try your distributions package 
manager first. I.e. in Gentoo
\code
 $ emerge cmake
\endcode

If your distribution does not have a cmake package, 
then you can install it into your home directory by hand. First, download
cmake-2.6.1-Linux-i386.tar.gz from the Downloads section at http://www.cmake.org.
Unpack the tarball to any location you prefer: this example assumes you are installing it to the 
${HOME}/software
\code 
 $ mkdir ~/software
 $ mv cmake-2.6.1-Linux-i386.tar.gz ~/software/
 $ cd ~/software
 $ tar -xvzf cmake-2.6.1-Linux-i386.tar.gz
\endcode
Then you need to put the bin directory for cmake into your path. If you use bash for a shell you can do 
this by editing ~/.bashrc. Look for a line with PATH=... and add the cmake directory to the end separated 
by a colon. If you can't find the line, create it like so.
\code
PATH=$PATH:$HOME/software/cmake-2.6.1-Linux-i386/bin
export PATH
\endcode
Restart your bash shell (or open a new one) and try the version check above to test your installation.

\section software_req_install_linux_cuda CUDA

Even if you do not have the needed graphics hardware to run, you can still install the CUDA toolkit and 
run executables in emulation mode. The emulation is slow, but will allow you to develop and test
any changes you make that affect any of the *GPU classes. 

CUDA is quite new and it is not likely that there is a package available through your linux distribution. 
Gentoo is the only distribution currently offering a package:
\code
 $ emerge nvidia-cuda-toolkit
\endcode
will install the latest version of the CUDA toolkit and set all environment variables for you.

If your distribution doesn't come with a package, go to http://developer.nvidia.com/object/cuda.html  
and download the latest CUDA toolkit for you architecture and linux distribution. If your distribution isn't listed,
pick one that looks close, it will likely work. To install, simply go to the directory where you downloaded 
the toolkit and run:
\code
 $ bash NVIDIA_CUDA_Toolkit_2.0_rhel5_x86_64.run
\endcode
Note, this example lists a specific file: change the command to match the file that you downloaded. The
file is a self-unpacking and installing script. Just accept the default location if you have root access
to install, or install to ~/CUDA or anywhere else you please. Open up ~/.bashrc in your
favorite text editor and add the following line:
\code
export LD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH
export PATH=$PATH:/usr/local/cuda/bin
\endcode
Change the paths on these lines if you did not install to the default location.

If you have a CUDA capable graphics card, you will also need the proper graphics driver version. See
the CUDA webpage linked to above for more information.

If you wish, you can download the CUDA SDK from the same website and compile the example files to
test your CUDA installation. The CUDA SDK is not required to compile or run HOOMD, however.

\section software_req_install_linux_subversion Subversion

Subversion is used for version control. You need to install it if you have commit access and are going to 
work on active development of HOOMD, or if you just want to download and compile the latest and greatest
version.

First, see if you already have subversion installed.
\code
 $ svn --version
svn, version 1.4.4 (r25188)
\endcode
If you get
\code
-bash: svn: command not found
\endcode
then you will need to install it with your distribution's package manager.

*/

/*! \page page_software_req_install_mac Installing Software Prerequisites on Mac OS X

Here are detailed instructions on installing the prerequisite software for Mac OS X. They 
list everything that needs to be done from a clean install of the operating system. If you
have already installed something listed here, you can skip it of course.

This page assumes that you have a standard terminal window open in some cases. Commands to run will
be indicated as below:
\code
 $ echo hello
hello
\endcode
" $ " indicates a shell prompt. As demonstrated above, if you type "echo hello", then you should see the same
output obtained above on the next line: "hello"

<b>1. Install XCode</b><br>
Mac OS X doesn't come with a c++ compiler. You need to download and install 
XCode from here: http://developer.apple.com/tools/xcode/ Install version 2.5 
if you have Mac OS X 10.4, or 3.0 if you have Mac OS X 10.5.

<b>2. Install python</b><br>
If you are running Mac OS X 10.4, you need to download and install the latest 
version of python (2.5.1) from http://www.python.org/download/ . 
Users on 10.5 (Leopard) should skip this step.

<b>3. Download and compile boost</b><br>
Building boost is a fairly complicated and time consuming process.

Start by downloading \b boost_1_36_0.tar.bz2 from http://www.boost.org/ . Extract the tarball and 
configure boost for building with the following commands.
\code
 $ tar -xjf boost_1_36_0.tar.bz2 
 $ cd boost_1_36_0
 $ ./configure
lding Boost.Jam with toolset darwin... 
tools/jam/src/bin.macosxx86/bjam
-n Detecting Python version... 
2.5
-n Detecting Python root... 
/System/Library/Frameworks/Python.framework/Versions/2.5
-n Unicode/ICU support for Boost.Regex?... 
not found.
Generating Boost.Build configuration in user-config.jam...
Generating Makefile...
\endcode

Users who downloaded and installed python from www.python.org may need to run the configure command
with the following argument in order for python to properly be detected.
\code
 $ ./configure --with-python=/Library/Frameworks/Python.framework/Versions/Current/bin/python
\endcode

Now, the default settings from configure generate unoptimized boost libraries. 
We can't have that since HOOMD is all about speed, so open the Makefile
\code
 $ open Makefile
\endcode

You need to make the following change (for building boost 1.35 or newer):
\code
BJAM_CONFIG=variant=release threading=multi link=shared,static
\endcode

Now, run the command
\code
 $ make
\endcode
and wait a \e long time for everything to compile. At the end, you should see a message saying
\code
...updated 747 targets...
\endcode

Now, you are ready to install the library (requires administrator privileges).
\code
 $ sudo make install
\endcode
After typing in your password and a considerably shorter wait, you should see
\code
...updated 7079 targets...
\endcode
again. Boost is now installed.

You can delete the boost_1_36_0 directory now if you wish. It might be worth 
saving for a little while until you have compiled HOOMD and know everything 
is working so that you won't need to go through all the setup steps again. 
A common error may be to forget the "sudo" in the last command which will 
result in boost not being installed and no obvious error message as to why. 
Just run the command again with the sudo if this is the case.

<b>4. CMake</b><br>
Download and install the CMake 2.6.1 or newer dmg from http://www.cmake.org/.

<b>5. CUDA</b><br>
Even if you do not have the needed graphics hardware to run, you can still install the CUDA toolkit and 
run executables in emulation mode. The emulation is slow, but will allow you to develop and test
any changes you make that affect any of the *GPU classes. 

Go to http://developer.nvidia.com/object/cuda.html and download the latest CUDA toolkit. Double-click
on the downloaded package to install it. 

One more step needs to be performed so that applications can find the CUDA libraries. Open up ~/.bash_profile in your
favorite text editor and add the following line:
\code
export DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH
export PATH=$PATH:/usr/local/cuda/bin
\endcode
Change the paths on these lines if you did not install to the default location.

If you wish, you can download the CUDA SDK from the same website and compile the example files to
test your CUDA installation. The CUDA SDK is not required to compile or run HOOMD, however.

<b>6. Subversion</b><br>
Subversion is used for version control. You need to install it if you have commit access and are going to 
work on active development of HOOMD, or if you just want to download and compile the latest and greatest
version.

Subversion is included in Mac OS X 10.5 and newer. If you are building HOOMD on an older version, 
subversion on Mac OS X is most easily installed from the dmg from here: http://downloads.open.collab.net/binaries.html

<b>7. Doxygen</b><br>
If you want to build this documentation from source, you will need to install Doxygen. There 
is a dmg available for download at http://www.stack.nl/~dimitri/doxygen/ .
*/

/*! \page page_software_req_install_windows Installing Software Prerequisites on Windows

\section software_req_install_windows_vstudio Visual Studio

First things first, you will need a compiler to build C++ applications. If you don't already
have one, that is not a problem. You can download and install a fully featured IDE and compiler, <b>Visual 
C++ Express 2005</b> from here: http://www.microsoft.com/express/2005/ . 

To build \b 64-bit applications, the express edition is not sufficient. You must install the
professional edition. If you don't have Visual C++ professional, you can still install the express edition
and 32-bit versions of all the other libraries and tools to build 32-bit executables on windows 64-bit.

After installing Visual C++ Express (or professional), you <b>absolutely, positively, most certainly MUST</b>
install Service Pack 1 for it. This can be done using Windows Update or by accessing Help->Update 
from within Visual Studio.

If you install the express edition, you must also follow the link from 
http://www.microsoft.com/express/2005/ to download the <b>Windows Platform SDK</b>
(ignore that the platform sdk says it is for windows 2003 server, it works on XP). If you
get an option, the preferred installation path is <i>C:\\Program Files\\Microsoft Platform SDK</i>.

Only a few options need to be activated for the install, namely the Windows Core SDK, and
only those components you really need for your architecture as shown in this
screenshot (shown for the x86 32-bit arch).
\image html windows_platform_sdk_options.png

All other installation options can be disabled (not all shown).

After installing the SDK, you need to set some paths. Open Visual Studio and select
the \b Tools menu and then select \b Options... Navigate to the section
<b>Projects and Solutions -> VC++ Directories</b>. As shown in this image:
\image html vstudio_directories.png
(yours may look slightly different from this one).

Using the upper right drop down box labeled \b "Show directories for" add<br>
<b>C:\\Program Files\\Microsoft Platform SDK\\bin</b> to \e Executables<br>
<b>C:\\Program Files\\Microsoft Platform SDK\\include</b> to \e Include files<br>
and <b>C:\\Program Files\\Microsoft Platform SDK\\lib</b> to \e Library files<br>
These are accomplished in the image above with the $(PLATFORMSDK_DIR) environment variable,
but you do not need to do the same, just type in the full path where you installed the
platform SDK directly or use the file chooser dialog box.

\b Note: If you intend to build installer packages to be redistributed, make sure that the 
registry key [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\8.0;InstallDir] is set 
properly (typically C:\\Program Files (x86)\\Microsoft Visual Studio 8\\Common7\\IDE). You
need this to get proper installation of the VS redistributable dlls required to run HOOMD
on user's machines.

\section software_req_install_windows_python Python

Download and install python binaries from http://www.python.org. If you choose to 
download the boost binaries (below), you \e must install python version \b 2.5.x. 
If you plan to build boost from source, you can install any version of python
you like, as long as it is newer than \b 2.3 and older than \b 2.6 (boost is not currently 
compatible. with 2.6)

If you are going to be building a \b 64-bit hoomd, make sure you download and install the
64-bit python.

\section software_req_install_windows_boost Boost

<b>Option 1: Install binaries.</b> Easy, but it only supports version \b 2.5.x of python 
(for boost 1.35.0, this may differ for the other boost versions, depending on which version of python 
boost-consulting compiled them against). This option \b cannot be used if you are going to build
a \b 64-bit hoomd.

Download the boost 1.35.0 installer from here http://www.boostpro.com/products/free .
When you run it, you will get an option screen that looks like this:
\image html boost_binary_install_windows.png
Select the options as indicated.

<b>Option 2: Compile from source.</b> Difficult, but enables the use of any supported version of python. 
These instructions are really only intended for advanced users and developers that will be building statically 
linked builds for download. This is the only way to get a \b 64-bit boost to use in compiling hoomd.

Download the source code from http://www.boost.org. This document assumes you have
downloaded boost 1.38.0. Additionally, you must download and install python before continuing. Instructions are above.

The full instructions for building boost are here: http://www.boost.org/doc/libs/1_38_0/more/getting_started/index.html . 
A summary of the commands needed are listed below.

\b 1. Download bjam: http://sourceforge.net/project/showfiles.php?group_id=7586&package_id=72941
You will need the file \b boost-jam-3.1.17-1-ntx86.zip

\b 2. Extract everything to a nice place. These instructions assume that \b boost has been 
extracted to <i>c:\\libraries\\boost_1_38_0</i> and \b bjam.exe is extracted to 
<i> c:\\libraries\\boost_1_38_0\\bjam.exe </i>.

\b 3. To compile, first open a build environment: 
	Start->Microsoft Platform SDK->Open Build Environment Window->Windows XP 32-bit Build Environment->Set Windows XP 32-bit Build Environment (Retail)
	(open the \b 64-bit build environment if you are going to build a 64-bit hoomd)
	
\b 4. In the terminal window that opens, cd to the extracted \e boost_1_38_0 directory and
	run the following command, then wait a \e long time for everything to compile.
	It is easiest to copy the entire command as one line and paste it
	(right click and choose paste in the command line window).
	It will install boost header files and libraries into c:\\opt (you can change
	the location by changing the value after --prefix).
\code
bjam --toolset="msvc" python=2.5 variant=release,debug threading=multi link=shared,static --prefix=c:\opt install
\endcode
	\b Note: add \c address-model=64 to the command line if you are going to build a \b 64-bit hoomd

For CMake to find your newly compiled boost libraries, you must set the environment 
variable \b BOOST_ROOT to c:\\opt (or wherever you installed boost).

\section software_req_install_windows_cuda CUDA
Download and install the latest toolkit from http://www.nvidia.com/object/cuda_get.html. There
is no need to install the SDK. If you have a CUDA capable graphics card, you will also need
the latest driver in order to execute HOOMD on the GPU (get from http://www.nvidia.com). 

If you do not have a CUDA capable graphics card, you can still install the toolkit and compile HOOMD in
CPU emulation mode. It is quite slow, but developers can use it to test any code they 
work on that touches GPU classes.

\section software_req_install_windows_cmake CMake
Download the latest CMake installer from here: http://www.cmake.org/HTML/Download.html

\section software_req_install_windows_subversion Subversion

TortoiseSVN is a nice graphical interface to subversion that integrates into the
windows explorer. Download from here: http://tortoisesvn.net/

If you prefer a command line, you can download one from here: 
http://www.sliksvn.com/en/download

Even if you only plan on using the GUI, there is a good reason to install both. It 
allows HOOMD executables to report the svnversion which can only be done if the command line tool 
is installed.
*/
