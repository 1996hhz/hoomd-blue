/*! \page page_xml_file_format XML File Format
<center><b>Version 1.0</b></center>

\section sec_xml_overview Overview

Both \link hoomd_script.init.read_xml init.read_xml\endlink and \link hoomd_script.dump.xml dump.xml\endlink
work with the same XML file format for specifying the system of particles. The format requires a minimal 
amount of meta-information in an easy to understand human-readable format. One of the key advantages of using 
XML is that it is also easily machine readable and commonly used, so many parsers exist for it.

The basic outline of a HOOMD xml file looks like this
\code
<?xml version="1.0" encoding="UTF-8"?>
<hoomd_xml version="1.0">
<!-- this is a comment, you can put as many of these in the file 
	wherever you wish to. -->
<configuration time_step="0">
	<!-- data nodes go here -->
</configuration>
</hoomd_xml>
\endcode

The first line of the file
\code
<?xml version="1.0" encoding="UTF-8"?>
\endcode
is just something that \b must be there to identify that this is an XML file.

The second and last lines signify the start and end of the root node \c hoomd_xml. 
The contents of the root node is between these begin and end markers. The version="1.0"
attribute specifies the version of the xml file format used when writing this file.
\code
<hoomd_xml version="1.0">
	<!-- contents of root node -->
</hoomd_xml>
\endcode

Inside the root node is the configuration node.
\code
<configuration time_step="0">
	<!-- data nodes go here -->
</configuration>
\endcode
\c time_step="0" is an attribute assigned to the configuration node. You can leave if off if you want
and the time step will default to 0. It is used as the initial time step in the simulation when read
by \link hoomd_script.init.read_xml init.read_xml\endlink. In files written by HOOMD, \c time_step 
will be set to the value of the time step when the system snapshot was taken.

<b>A note on case-sensitivity:</b> 
 - All node names and attributes are in all lower case. As XML is a case
	sensitive file format, all readers and writers must adhere to this. However, \link hoomd_script.init.read_xml init.read_xml\endlink
	will try to be generous and handle any possible typos that a user makes on entering data and will accept
	files with varying cases.
 - The \b content of any node is of course case sensitive.

A number of data nodes can be included inside the configuration node <b>in any order</b>.

 - \b box (\ref sec_xml_box)
 - \b position (\ref sec_xml_position)
 - \b image (\ref sec_xml_image)
 - \b velocity (\ref sec_xml_velocity)
 - \b mass (\ref sec_xml_mass)
 - \b diameter (\ref sec_xml_diameter)
 - \b type (\ref sec_xml_type)
 - \b bond (\ref sec_xml_bond)
 - \b wall (\ref sec_xml_wall)
 
Detailed documentation for each node is below.
<hr>

\section sec_xml_box Simulation box specification
The \<box\> node defines the dimensions of the simulation box which particles are placed in.<br>
\link hoomd_script.dump.xml dump.xml\endlink \b always writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink \b requires this node be specified.

\b Example:
\code
<box units="sigma"  lx="5.1" ly="9.6" lz="15.8"/>
\endcode
\b Attributes:
 - \a units Currently unused. Potentially used for a future feature in HOOMD supporting different units
 	for length, energy, etc...
 - \a lx Box length in the \b x direction
 - \a ly Box length in the \b y direction
 - \a lz Box length in the \b z direction

<hr>

\section sec_xml_position Particle positions
The \<position\> node sets the position of each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink \b requires this node be specified.

\b Example:
\code
<position units="sigma">
-1.45 2.21 1.56
8.76 1.02 5.60
5.67 8.30 4.67
</position>
\endcode
\b Attributes:
 - \a units Currently unused. Potentially used for a future feature in HOOMD supporting different units
 	for length, energy, etc...\
 - \a num (\b optional) number of particles coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

In between the begin and end markers \<position\> and \</position\> is a series of floating point
numbers in plain-text separated by whitespace. These are read in order <i>x0 y0 z0 x1 y1 z1 x2 
y2 z2 ... x(N-1) y(N-1) z(N-1)</i>. Note that you do not need to specify the number of particles
anywhere, just add as many as you want and \link hoomd_script.init.read_xml init.read_xml\endlink
will count them. The particular form of the whitespace used does not matter (space, tab, newline,
etc...), the example above uses spaces between \em x, \em y, and \em z and newlines between 
particles merely to make it more easily human-readable.

All particles must be in the box: \a x \> -Lx/2.0 and \a x \< Lx/2.0 and similarly for \a y and \a z.

<hr>

\section sec_xml_image Particle images
The \<image\> node sets the box image for each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node.<br>
When used in an input file, the images specified are used as the initial condition for the simulation.

\b Example:
\code
<image>
-1 -5 12
18 2 -10
13 -5 0
</image>
\endcode
\b Attributes:
 - \a num (\b optional) number of images coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

The format of the node data is the same as for \<position\> (see \ref sec_xml_position), except that the 
values must be integers. If specifying both position and image in an input file, be certain to include the 
same number of particles in each, or \link hoomd_script.init.read_xml init.read_xml\endlink will generate an 
error.

Image flags are used to track the movement of particles across the periodic boundary conditions. To unwrap
the position of a single particle and see its trajectory as if it did not wrap around the boundary, 
compute \code x + ix * Lx\endcode where \c x is the particle coordinate, \c ix is the image and \c Lx is the
box dimension.

<hr>

\section sec_xml_velocity Particle velocities
The \<velocity\> node sets the velocity of each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node.<br>
When used in an input file, the velocities specified are used as the initial condition for the simulation.

\b Example:
\code
<velocity units="sigma/tau">
-0.5 -1.2 0.4
0.6 2.0 0.01
-0.4 3.0 0.0
</velocity>
\endcode
\b Attributes:
 - \a units Currently unused. Potentially used for a future feature in HOOMD supporting different units
 	for length, energy, etc...
 - \a num (\b optional) number of velocities coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.	

The format of the node data is the same as for \<position\> (see \ref sec_xml_position). If specifying
both position and velocity in an input file, be certain to include the same number of particles in each,
or \link hoomd_script.init.read_xml init.read_xml\endlink will generate an error.

<hr>

\section sec_xml_mass Particle masses
The \<mass\> node sets the mass of each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node (all masses default to 1.0 if it is not specified).<br>

\b Example:
\code
<mass>
1.0
2.0
1.0
</mass>
\endcode
\b Attributes:
 - \a num (\b optional) number of masses coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

The format of the node data is the same as for \<position\> (see \ref sec_xml_position), except that only one value
per particle is specified.

<hr>

\section sec_xml_diameter Particle diameters
The \<diameter\> node sets the diameter of each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node (all diameters default to 1.0 if it is not specified).<br>

\b Example:
\code
<diameter units="sigma">
1.0
2.0
1.0
</diameter>
\endcode
\b Attributes:
 - \a units Currently unused. Potentially used for a future feature in HOOMD supporting different units
 	for length, energy, etc...
 - \a num (\b optional) number of masses coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

The format of the node data is the same as for \<position\> (see \ref sec_xml_position), except that only one value
per particle is specified.

<hr>

\section sec_xml_type Particle types
The \<type\> node sets the type name of each particle in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink \b requires this node be specified.

\b Example:
\code
<type>
A
long_type_name
A
</type>
\endcode
\b Attributes:
 - \a num (\b optional) number of types coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

The format of the node data is similar to that of \<position\> (see \ref sec_xml_position),
except that only one type is specified for each particle. A particle type can be \b any
string you want that does not include whitespace (as whitespace is used to signify
the next particle in the list). Internally, HOOMD assigns no meaning whatsoever to the 
value of the string you specify so name your particles in ways that are meaningful to you.
When performing tasks such as setting the coefficients of a \link hoomd_script.pair pair\endlink 
force, the type strings given are simply matched up to those specified in the xml file.

If specifying both position and type in an input file, be certain to include the same number of
particles in each, or \link hoomd_script.init.read_xml init.read_xml\endlink will generate an error.

<hr>

\section sec_xml_bond Bonds between particles

The \<bond\> node specifies any number of bonds between particles in the simulation.<br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node

Example:
\code
<bond>
polymer 0 1
backbone 1 2
</bond>
\endcode
\b Attributes:
 - \a num (\b optional) number of bonds coming in the node content. This attribute is written by
	\link hoomd_script.init.read_xml init.read_xml\endlink to potentially aid in making parsers easier to write.

The above example creates a bond of type \em polymer between particle 0 and 1 and one of type
\em backbone between 1 and 2. The general format is <i>type0 idx_a0 idx_b0 type1 idx_a1 idx_b1 ....</i>
where type is any string without whitespace, idx_a is the index of the first particle in the bond and
idx_b is the index of the second particle in the bond. Each field is separated from the next by
whitespace (any number of spaces, tabs, or newlines). 

Specifying the bonds themselves doesn't result in any additional forces on particles. For
that, you must specify a bond force (see \link hoomd_script.bond bond\endlink).

A typical usage would list many bonds of the same type. Coefficients for the associated bond
force can be set separately for each bond type by name (for example, see \link hoomd_script.bond.harmonic
bond.harmonic\endlink).

<hr>

\section sec_xml_wall Walls in the simulation box

The \<wall\> node specifies any number of walls in the simulation box. Walls have no
meaning unless a wall force such as \link hoomd_script.wall.lj wall.lj\endlink is specified 
in the simulation. <br>
\link hoomd_script.dump.xml dump.xml\endlink \em optionally writes this node.<br>
\link hoomd_script.init.read_xml init.read_xml\endlink does not require this node

Example:
\code
<wall>
<coord ox="1.0" oy="2.0" oz="3.0" nx="4.0" ny="5.0" nz="6.0"/>
<coord ox="7.0" oy="8.0" oz="9.0" nx="10.0" ny="11.0" nz="-12.0"/>
</wall>
\endcode

Every wall is specified by a plane. The vector (\em ox, \em oy, \em oz) is the origin, a point
in the plane and (\em nx, \em ny, \em nz) is the normal.

*/